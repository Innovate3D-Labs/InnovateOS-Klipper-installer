name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v2

    # Backend setup and tests
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run backend tests
      run: |
        cd backend
        pytest --cov=app --cov-report=xml

    # Frontend setup and tests
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:unit

    - name: Run frontend lint
      run: |
        cd frontend
        npm run lint

    # Build check
    - name: Build frontend
      run: |
        cd frontend
        npm run build

    # Upload coverage reports
    - name: Upload backend coverage
      uses: codecov/codecov-action@v2
      with:
        files: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v2
      with:
        files: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          innovateos/klipper-installer:latest
          innovateos/klipper-installer:${{ github.sha }}
        cache-from: type=registry,ref=innovateos/klipper-installer:buildcache
        cache-to: type=registry,ref=innovateos/klipper-installer:buildcache,mode=max

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /opt/klipper-installer
          docker-compose pull
          docker-compose up -d
          docker system prune -f
